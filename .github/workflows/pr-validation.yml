name: PR Validation & Auto-Labeling

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate-and-label:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate and Label PR
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            const pr = context.payload.pull_request;
            
            // Get PR files
            const files = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: prNumber
            });
            
            const changedFiles = files.data.map(file => file.filename);
            const labels = [];
            
            // Auto-label based on file paths
            const labelRules = {
              'documentation': [/^docs\//, /\.md$/, /README/],
              'frontend': [/^app\//, /^components\//, /\.tsx?$/, /\.css$/],
              'backend': [/^api\//, /route\.ts$/, /\.ts$/, /server/],
              'github-actions': [/^\.github\//, /\.yml$/, /\.yaml$/],
              'community': [/^community\//, /CONTRIBUTORS/, /CODE_OF_CONDUCT/],
              'config': [/package\.json/, /tsconfig/, /next\.config/, /tailwind/],
              'assets': [/^public\//, /\.(png|jpg|jpeg|gif|svg|ico)$/]
            };
            
            // Apply labels based on changed files
            for (const [label, patterns] of Object.entries(labelRules)) {
              if (patterns.some(pattern => changedFiles.some(file => pattern.test(file)))) {
                labels.push(label);
              }
            }
            
            // Check for linked issues
            const body = pr.body || '';
            const issueLinks = body.match(/(closes|fixes|resolves)\s+#(\d+)/gi);
            let hasLinkedIssue = false;
            
            if (issueLinks) {
              hasLinkedIssue = true;
              labels.push('linked-issue');
              
              // Validate linked issues exist
              for (const link of issueLinks) {
                const issueNumber = link.match(/#(\d+)/)[1];
                try {
                  await github.rest.issues.get({
                    owner,
                    repo,
                    issue_number: parseInt(issueNumber)
                  });
                } catch (error) {
                  labels.push('invalid-issue-link');
                  break;
                }
              }
            } else {
              labels.push('no-linked-issue');
            }
            
            // Size labeling based on changes
            const additions = pr.additions || 0;
            const deletions = pr.deletions || 0;
            const totalChanges = additions + deletions;
            
            if (totalChanges < 10) {
              labels.push('size/XS');
            } else if (totalChanges < 50) {
              labels.push('size/S');
            } else if (totalChanges < 200) {
              labels.push('size/M');
            } else if (totalChanges < 500) {
              labels.push('size/L');
            } else {
              labels.push('size/XL');
            }
            
            // Check if it's a first-time contributor
            const author = pr.user.login;
            const authorPRs = await github.rest.pulls.list({
              owner,
              repo,
              state: 'all',
              creator: author
            });
            
            if (authorPRs.data.length === 1) {
              labels.push('first-time-contributor');
            }
            
            // Apply all labels
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: prNumber,
                labels
              });
            }
            
            // Auto-request reviewers based on file changes
            const reviewerRules = {
              'basanth': ['frontend', 'backend', 'config'],
              // Add more reviewers based on your team
            };
            
            const requestedReviewers = [];
            for (const [reviewer, areas] of Object.entries(reviewerRules)) {
              if (areas.some(area => labels.includes(area))) {
                requestedReviewers.push(reviewer);
              }
            }
            
            if (requestedReviewers.length > 0 && author !== 'basanth') {
              try {
                await github.rest.pulls.requestReviewers({
                  owner,
                  repo,
                  pull_number: prNumber,
                  reviewers: requestedReviewers
                });
              } catch (error) {
                console.log('Could not request reviewers:', error.message);
              }
            }
            
            // Comment with validation results
            let comment = `## 🤖 PR Validation Results\n\n`;
            comment += `**Labels Applied:** ${labels.map(l => `\`${l}\``).join(', ')}\n`;
            comment += `**Size:** ${totalChanges} lines changed (+${additions}/-${deletions})\n`;
            comment += `**Linked Issue:** ${hasLinkedIssue ? '✅ Yes' : '❌ No'}\n\n`;
            
            if (!hasLinkedIssue) {
              comment += `⚠️ **Recommendation:** Link this PR to an issue using "Closes #123" in the description.\n\n`;
            }
            
            comment += `**Files Changed:**\n${changedFiles.map(f => `- \`${f}\``).join('\n')}\n\n`;
            comment += `Thank you for your contribution! 🎉`;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: prNumber,
              body: comment
            });