name: Contribution Detector

on:
  issues:
    types: [opened, closed]
  pull_request:
    types: [opened, closed]
  pull_request_review:
    types: [submitted]
  discussion:
    types: [created, answered]
  issue_comment:
    types: [created]

jobs:
  detect-contribution:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      discussions: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install @octokit/rest

      - name: Detect and Process Contribution
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Contribution point values
            const POINTS = {
              issue_opened: 2,
              issue_closed: 3,
              pr_opened: 3,
              pr_reviewed: 3,
              discussion_created: 2,
              discussion_answered: 4,
              comment_created: 1
            };
            
            // Determine contribution type and user
            let contributionType, username, points, evidence = {};
            
            if (context.eventName === 'issues') {
              username = context.payload.issue.user.login;
              if (context.payload.action === 'opened') {
                contributionType = 'issue_opened';
                evidence.issue_number = context.payload.issue.number;
              } else if (context.payload.action === 'closed') {
                contributionType = 'issue_closed';
                evidence.issue_number = context.payload.issue.number;
              }
            } else if (context.eventName === 'pull_request') {
              username = context.payload.pull_request.user.login;
              if (context.payload.action === 'opened') {
                contributionType = 'pr_opened';
                evidence.pr_number = context.payload.pull_request.number;
              } else if (context.payload.action === 'closed' && context.payload.pull_request.merged) {
                contributionType = 'pr_merged';
                evidence.pr_number = context.payload.pull_request.number;
              }
            } else if (context.eventName === 'pull_request_review') {
              username = context.payload.review.user.login;
              contributionType = 'pr_reviewed';
              evidence.pr_number = context.payload.pull_request.number;
              evidence.review_id = context.payload.review.id;
            } else if (context.eventName === 'discussion') {
              username = context.payload.discussion.user.login;
              if (context.payload.action === 'created') {
                contributionType = 'discussion_created';
                evidence.discussion_number = context.payload.discussion.number;
              } else if (context.payload.action === 'answered') {
                contributionType = 'discussion_answered';
                evidence.discussion_number = context.payload.discussion.number;
              }
            } else if (context.eventName === 'issue_comment') {
              username = context.payload.comment.user.login;
              contributionType = 'comment_created';
              evidence.issue_number = context.payload.issue.number;
              evidence.comment_id = context.payload.comment.id;
            }
            
            if (!contributionType || !username) {
              console.log('No valid contribution detected');
              return;
            }
            
            points = POINTS[contributionType] || 1;
            
            console.log(`Detected: ${contributionType} by ${username} (+${points} points)`);
            
            // Load or create contributor data
            const contributorFile = `community/contributors/${username}.json`;
            let contributorData = {
              username,
              totalPoints: 0,
              contributions: [],
              badges: [],
              milestones: [],
              joinDate: new Date().toISOString().split('T')[0],
              lastActivity: new Date().toISOString().split('T')[0]
            };
            
            if (fs.existsSync(contributorFile)) {
              contributorData = JSON.parse(fs.readFileSync(contributorFile, 'utf8'));
            }
            
            // Add new contribution
            const contribution = {
              type: contributionType,
              points,
              timestamp: new Date().toISOString(),
              evidence
            };
            
            contributorData.contributions.push(contribution);
            contributorData.totalPoints += points;
            contributorData.lastActivity = new Date().toISOString().split('T')[0];
            
            // Check for milestones
            const milestones = checkMilestones(contributorData);
            contributorData.milestones.push(...milestones);
            
            // Ensure directory exists
            const dir = path.dirname(contributorFile);
            if (!fs.existsSync(dir)) {
              fs.mkdirSync(dir, { recursive: true });
            }
            
            // Save contributor data
            fs.writeFileSync(contributorFile, JSON.stringify(contributorData, null, 2));
            
            // Award badges based on contribution type
            if (contributionType === 'pr_merged') {
              await exec.exec('node', ['.github/scripts/award-badge.js', '--badge-type', 'first_pr', '--username', username, '--pr-number', evidence.pr_number.toString()]);
            } else if (contributionType === 'issue_closed') {
              await exec.exec('node', ['.github/scripts/award-badge.js', '--badge-type', 'issue_resolver', '--username', username, '--issue-number', evidence.issue_number.toString()]);
            } else if (contributionType === 'pr_reviewed') {
              await exec.exec('node', ['.github/scripts/award-badge.js', '--badge-type', 'code_reviewer', '--username', username, '--pr-number', evidence.pr_number.toString()]);
            }
            
            // Welcome first-time contributors
            if (contributorData.contributions.length === 1) {
              await welcomeNewContributor(username, contributionType, evidence);
            }
            
            // Milestone functions
            function checkMilestones(data) {
              const newMilestones = [];
              const prCount = data.contributions.filter(c => c.type === 'pr_merged').length;
              const issueCount = data.contributions.filter(c => c.type === 'issue_closed').length;
              
              // PR milestones
              if (prCount === 10 && !data.milestones.find(m => m.type === 'pr_master_10')) {
                newMilestones.push({
                  type: 'pr_master_10',
                  title: 'PR Master',
                  description: 'Merged 10 pull requests',
                  achievedAt: new Date().toISOString(),
                  points: 20
                });
              }
              
              // Issue milestones
              if (issueCount === 25 && !data.milestones.find(m => m.type === 'issue_hunter_25')) {
                newMilestones.push({
                  type: 'issue_hunter_25',
                  title: 'Issue Hunter',
                  description: 'Closed 25 issues',
                  achievedAt: new Date().toISOString(),
                  points: 25
                });
              }
              
              // Point milestones
              if (data.totalPoints >= 100 && !data.milestones.find(m => m.type === 'century_club')) {
                newMilestones.push({
                  type: 'century_club',
                  title: 'Century Club',
                  description: 'Earned 100+ contribution points',
                  achievedAt: new Date().toISOString(),
                  points: 30
                });
              }
              
              return newMilestones;
            }
            
            async function welcomeNewContributor(username, type, evidence) {
              const welcomeMessage = `🎉 Welcome to the func(Kode) community, @${username}!\n\n` +
                "Thank you for your first contribution! Here's what you can do next:\n\n" +
                "🏅 **Badge System**: You'll automatically earn badges for your contributions\n" +
                "📊 **Leaderboard**: Check out our [community leaderboard](/leaderboard)\n" +
                "🎯 **Milestones**: Work towards exciting milestones and special badges\n" +
                "💬 **Community**: Join our discussions and help other contributors\n\n" +
                "Your contribution journey starts now! 🚀";

              if (type === 'pr_merged' && evidence.pr_number) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: evidence.pr_number,
                  body: welcomeMessage
                });
              } else if (type === 'issue_opened' && evidence.issue_number) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: evidence.issue_number,
                  body: welcomeMessage
                });
              }
            }

      - name: Commit contribution data
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "📊 Updated contribution data for @${{ github.actor }}"
          file_pattern: "community/contributors/*.json"