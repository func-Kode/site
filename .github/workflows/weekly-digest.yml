name: Weekly Community Digest

on:
  schedule:
    # Every Sunday at 9:00 AM UTC
    - cron: '0 9 * * 0'
  workflow_dispatch:

jobs:
  generate-digest:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
      pull-requests: read
      discussions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install @octokit/rest date-fns

      - name: Generate Weekly Digest
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { format, subDays } = require('date-fns');
            
            const now = new Date();
            const weekAgo = subDays(now, 7);
            const weekStart = format(weekAgo, 'yyyy-MM-dd');
            const weekEnd = format(now, 'yyyy-MM-dd');
            
            console.log(`Generating digest for ${weekStart} to ${weekEnd}`);
            
            // Get week's activity
            const [prs, issues, discussions] = await Promise.all([
              github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all',
                sort: 'updated',
                direction: 'desc',
                per_page: 100
              }),
              github.rest.issues.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all',
                sort: 'updated',
                direction: 'desc',
                per_page: 100
              }),
              github.rest.search.issuesAndPullRequests({
                q: `repo:${context.repo.owner}/${context.repo.repo} is:discussion updated:>${weekStart}`
              })
            ]);
            
            // Filter for this week's activity
            const thisWeekPRs = prs.data.filter(pr => 
              new Date(pr.created_at) >= weekAgo || 
              (pr.merged_at && new Date(pr.merged_at) >= weekAgo)
            );
            
            const thisWeekIssues = issues.data.filter(issue => 
              !issue.pull_request && (
                new Date(issue.created_at) >= weekAgo ||
                (issue.closed_at && new Date(issue.closed_at) >= weekAgo)
              )
            );
            
            const thisWeekDiscussions = discussions.data.items.filter(discussion =>
              new Date(discussion.updated_at) >= weekAgo
            );
            
            // Get contributor stats
            const contributorStats = {};
            
            [...thisWeekPRs, ...thisWeekIssues].forEach(item => {
              const user = item.user.login;
              if (!contributorStats[user]) {
                contributorStats[user] = { prs: 0, issues: 0, total: 0 };
              }
              
              if (item.pull_request || thisWeekPRs.includes(item)) {
                contributorStats[user].prs++;
              } else {
                contributorStats[user].issues++;
              }
              contributorStats[user].total++;
            });
            
            // Sort top contributors
            const topContributors = Object.entries(contributorStats)
              .sort(([,a], [,b]) => b.total - a.total)
              .slice(0, 5);
            
            // Get good first issues
            const goodFirstIssues = await github.rest.issues.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'good first issue',
              state: 'open',
              per_page: 5
            });
            
            // Generate digest content
            let digest = `# 📰 func(Kode) Weekly Digest\n`;
            digest += `**Week of ${format(weekAgo, 'MMMM d')} - ${format(now, 'MMMM d, yyyy')}**\n\n`;
            
            // Stats overview
            digest += `## 📊 This Week's Stats\n\n`;
            digest += `- 🔀 **${thisWeekPRs.length}** Pull Requests\n`;
            digest += `- 🐛 **${thisWeekIssues.length}** Issues\n`;
            digest += `- 💬 **${thisWeekDiscussions.length}** Discussions\n`;
            digest += `- 👥 **${Object.keys(contributorStats).length}** Active Contributors\n\n`;
            
            // Top contributors
            if (topContributors.length > 0) {
              digest += `## 🏆 Top Contributors\n\n`;
              topContributors.forEach(([user, stats], index) => {
                const emoji = index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : '🏅';
                digest += `${emoji} **@${user}** - ${stats.prs} PRs, ${stats.issues} issues\n`;
              });
              digest += `\n`;
            }
            
            // Merged PRs
            const mergedPRs = thisWeekPRs.filter(pr => pr.merged_at);
            if (mergedPRs.length > 0) {
              digest += `## ✅ Merged Pull Requests\n\n`;
              mergedPRs.slice(0, 10).forEach(pr => {
                digest += `- [#${pr.number}](${pr.html_url}) ${pr.title} by @${pr.user.login}\n`;
              });
              digest += `\n`;
            }
            
            // New issues
            const newIssues = thisWeekIssues.filter(issue => new Date(issue.created_at) >= weekAgo);
            if (newIssues.length > 0) {
              digest += `## 🆕 New Issues\n\n`;
              newIssues.slice(0, 5).forEach(issue => {
                digest += `- [#${issue.number}](${issue.html_url}) ${issue.title}\n`;
              });
              digest += `\n`;
            }
            
            // Good first issues
            if (goodFirstIssues.data.length > 0) {
              digest += `## 🌱 Good First Issues\n\n`;
              digest += `Perfect for new contributors:\n\n`;
              goodFirstIssues.data.forEach(issue => {
                digest += `- [#${issue.number}](${issue.html_url}) ${issue.title}\n`;
              });
              digest += `\n`;
            }
            
            // Active discussions
            if (thisWeekDiscussions.length > 0) {
              digest += `## 💬 Active Discussions\n\n`;
              thisWeekDiscussions.slice(0, 5).forEach(discussion => {
                digest += `- [${discussion.title}](${discussion.html_url})\n`;
              });
              digest += `\n`;
            }
            
            // Call to action
            digest += `## 🚀 Get Involved\n\n`;
            digest += `- 🏅 [Check the leaderboard](/leaderboard) to see your ranking\n`;
            digest += `- 🎯 [View open issues](https://github.com/${context.repo.owner}/${context.repo.repo}/issues) to contribute\n`;
            digest += `- 💬 [Join discussions](https://github.com/${context.repo.owner}/${context.repo.repo}/discussions) to help others\n`;
            digest += `- 📚 [Read our contributing guide](CONTRIBUTING.md) to get started\n\n`;
            digest += `---\n`;
            digest += `*This digest was automatically generated. Join our community and be featured in next week's digest!*\n`;
            
            // Save digest
            const filename = `community/digests/DIGEST_${format(now, 'yyyy-MM-dd')}.md`;
            const dir = 'community/digests';
            
            if (!fs.existsSync(dir)) {
              fs.mkdirSync(dir, { recursive: true });
            }
            
            fs.writeFileSync(filename, digest);
            console.log(`Digest saved to ${filename}`);
            
            // Update latest digest link in README if it exists
            const readmePath = 'README.md';
            if (fs.existsSync(readmePath)) {
              let readme = fs.readFileSync(readmePath, 'utf8');
              const digestLink = `[📰 Latest Weekly Digest](${filename})`;
              
              // Replace existing digest link or add new one
              if (readme.includes('📰 Latest Weekly Digest')) {
                readme = readme.replace(/\[📰 Latest Weekly Digest\]\([^)]+\)/, digestLink);
              } else {
                // Add to top of README after title
                const lines = readme.split('\n');
                lines.splice(2, 0, '', digestLink, '');
                readme = lines.join('\n');
              }
              
              fs.writeFileSync(readmePath, readme);
            }

      - name: Send Discord Notification
        if: ${{ env.DISCORD_WEBHOOK_URL != '' }}
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -H "Content-Type: application/json" \
               -d "{\"content\": \"📰 **Weekly Digest Published!**\\n\\nThis week's community highlights are now available. Check out our top contributors, merged PRs, and good first issues!\\n\\n🔗 [View Digest](https://github.com/${{ github.repository }}/blob/main/community/digests/DIGEST_$(date +%Y-%m-%d).md)\"}" \
               $DISCORD_WEBHOOK_URL

      - name: Commit digest
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "📰 Weekly community digest - $(date +%Y-%m-%d)"
          file_pattern: "community/digests/*.md README.md"